# Multi-Role Pipeline for AI Agent Workflow
# 
# Required Repository Configuration:
# 1. Environments (Settings → Environments):
#    Create these environments exactly as named:
#    - Name: dev
#      Protection rules: None
#    - Name: test
#      Protection rules:
#        - Required reviewers: None
#        - Wait timer: None
#        - Deployment branches: All
#    - Name: staging
#      Protection rules:
#        - Required reviewers: None
#        - Wait timer: None
#        - Deployment branches: All
#    - Name: prod
#      Protection rules:
#        - Required reviewers: 1
#        - Wait timer: 10 minutes
#        - Deployment branches: main only
#
# 2. Repository Variables (Settings → Secrets and variables → Actions → Variables):
#    - PYTHON_VERSION: '3.11'
#
# 3. Repository Secrets (Settings → Secrets and variables → Actions → Secrets):
#    - GEMINI_API_KEY: API key for Gemini AI model

name: AI Agent Workflow Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run every day at midnight

permissions:
  contents: read

env:
  PYTHON_VERSION: '3.11'
  ACTIONS_STEP_DEBUG: true  # Enable step debugging
  ACTIONS_RUNNER_DEBUG: true  # Enable runner debugging

jobs:
  validate_secrets:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      contents: read
    steps:
      - name: Validate Secrets
        id: validate
        run: |
          # Check required secrets
          if [[ -z "${{ secrets.GEMINI_API_KEY }}" ]]; then
            echo "::error::GEMINI_API_KEY is not set"
            exit 1
          fi
          echo "All required secrets are set"

  initial_analysis:
    needs: [validate_secrets]
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run initial analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "Current directory: $(pwd)"
          echo "PYTHONPATH: $PYTHONPATH"
          echo "\nDirectory contents:"
          ls -la
          
          echo "\nTests directory contents:"
          ls -la tests/
          
          echo "\nPython version and location:"
          which python
          python --version
          
          echo "\nInstalled packages:"
          pip list
          
          echo "\nTest collection only:"
          python -m pytest tests/test_initial_analysis.py --collect-only -v
          
          echo "\nRunning tests with full debug output:"
          python -m pytest tests/test_initial_analysis.py -v --tb=long

  planning_and_implementation:
    needs: [initial_analysis]
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run planning and implementation
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          # Clear pytest cache
          rm -rf .pytest_cache
          python -m pytest --cache-clear
          
          # Show test collection and available methods
          python -m pytest tests/test_planning.py --collect-only -v
          
          # Run tests with full debug output
          python -m pytest tests/test_planning.py -v --log-cli-level=DEBUG --tb=long
          python -m pytest tests/test_implementation.py -v

  quality_assurance:
    needs: [planning_and_implementation]
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run QA tests
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python -m pytest tests/test_qa.py -v

  deploy_staging:
    needs: [quality_assurance]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to staging
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python scripts/deploy.py --env staging

  deploy_production:
    needs: [deploy_staging]
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to production
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python scripts/deploy.py --env production

  monitoring_and_analytics:
    needs: [deploy_production]
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run monitoring and analytics
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python scripts/monitor.py
