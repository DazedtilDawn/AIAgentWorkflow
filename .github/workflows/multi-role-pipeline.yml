# Multi-Role Pipeline for AI Agent Workflow
# 
# Required Repository Configuration:
# 1. Environments (Settings → Environments):
#    Create these environments exactly as named:
#    - Name: test
#      URL: https://test.example.com
#      Protection rules: None
#    - Name: staging
#      URL: https://staging.example.com
#      Protection rules:
#        - Required reviewers: None
#        - Wait timer: None
#        - Deployment branches: All
#    - Name: production
#      URL: https://prod.example.com
#      Protection rules:
#        - Required reviewers: 1
#        - Wait timer: 10 minutes
#        - Deployment branches: main only
#
# 2. Repository Variables (Settings → Secrets and variables → Actions → Variables):
#    - PYTHON_VERSION: '3.10'
#    - AWS_REGION: 'us-east-1'
#
# 3. Repository Secrets (Settings → Secrets and variables → Actions → Secrets):
#    - GEMINI_API_KEY: API key for Gemini AI model
#    - AWS_ACCESS_KEY_ID: AWS access key for deployments
#    - AWS_SECRET_ACCESS_KEY: AWS secret key for deployments
#
# Note: The context access warnings for secrets can be safely ignored
# as long as the secrets are properly configured in the repository settings.

name: "Multi-Role Pipeline"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run every day at midnight

env:
  PYTHON_VERSION: '3.10'

permissions:
  id-token: write
  contents: read
  deployments: write
  security-events: write

jobs:
  initial_analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        role: [product-manager, brainstorm-facilitator, architect]
        include:
          - role: product-manager
            artifact: PRODUCT_SPECS.md
          - role: brainstorm-facilitator
            artifact: BRAINSTORM_OUTCOME.md
          - role: architect
            artifact: SYSTEM_ARCHITECTURE.md
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install package in development mode
          pip install -e .
          # List installed packages
          pip list
          # Verify installations
          python -c "import google.generativeai as genai; print(f'Google AI version: {genai.__version__}')"
          python -c "import ai_agents; print(f'AI Agents version: {ai_agents.__version__}')"
          # List modules in ai_agents
          python -c "import ai_agents; print('Available modules:', [m for m in dir(ai_agents) if not m.startswith('_')])"
      - name: Run Analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Convert role name to module format (replace - with _)
          module_name="${{ matrix.role }}"
          module_name=${module_name//-/_}
          python -m ai_agents.${module_name} execute
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.role }}-analysis
          path: artifacts/${{ matrix.artifact }}
          retention-days: 5
          compression-level: 9
          overwrite: false

  planning_and_implementation:
    needs: [initial_analysis]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        role: [planner, engineer]
        include:
          - role: planner
            artifact: PLAN.md
            artifact_name: planner-output
          - role: engineer
            artifact: |
              src/**/*
              tests/**/*
              artifacts/COMMIT_SUMMARY.md
            artifact_name: engineer-output
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install package in development mode
          pip install -e .
          # List installed packages
          pip list
          # Verify installations
          python -c "import google.generativeai as genai; print(f'Google AI version: {genai.__version__}')"
          python -c "import ai_agents; print(f'AI Agents version: {ai_agents.__version__}')"
          # List modules in ai_agents
          python -c "import ai_agents; print('Available modules:', [m for m in dir(ai_agents) if not m.startswith('_')])"
      - uses: actions/download-artifact@v4
        with:
          pattern: '*-analysis'
          merge-multiple: true
          path: artifacts
      - name: Execute Role
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Create artifacts directory if needed
          mkdir -p artifacts
          # Run role
          python -m ai_agents.${{ matrix.role }} execute
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact }}
          retention-days: 5
          compression-level: 9
          overwrite: false

  quality_assurance:
    needs: [planning_and_implementation]
    runs-on: ubuntu-latest
    environment: 
      name: test
      url: ${{ steps.deploy.outputs.url }}
    strategy:
      matrix:
        role: [reviewer, qa_engineer]
        include:
          - role: reviewer
            artifact: REVIEW.md
            artifact_name: review-output
          - role: qa_engineer
            artifact: TEST_DEBUG_REPORT.md
            artifact_name: qa-output
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install package in development mode
          pip install -e .
          # List installed packages
          pip list
          # Verify installations
          python -c "import google.generativeai as genai; print(f'Google AI version: {genai.__version__}')"
          python -c "import ai_agents; print(f'AI Agents version: {ai_agents.__version__}')"
          # List modules in ai_agents
          python -c "import ai_agents; print('Available modules:', [m for m in dir(ai_agents) if not m.startswith('_')])"
      - uses: actions/download-artifact@v4
        with:
          pattern: '*-output'
          merge-multiple: true
          path: artifacts
      - name: Run QA Tasks
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Create artifacts directory if needed
          mkdir -p artifacts
          # Run QA
          python -m ai_agents.${{ matrix.role }} execute
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/${{ matrix.artifact }}
          retention-days: 5
          compression-level: 9
          overwrite: false

  deploy_staging:
    needs: [quality_assurance]
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    concurrency: 
      group: staging_environment
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install package in development mode
          pip install -e .
          # List installed packages
          pip list
          # Verify installations
          python -c "import google.generativeai as genai; print(f'Google AI version: {genai.__version__}')"
          python -c "import ai_agents; print(f'AI Agents version: {ai_agents.__version__}')"
          # List modules in ai_agents
          python -c "import ai_agents; print('Available modules:', [m for m in dir(ai_agents) if not m.startswith('_')])"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - uses: actions/download-artifact@v4
        with:
          pattern: '*-output'
          merge-multiple: true
          path: artifacts
      - name: Deploy to Staging
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Create artifacts directory if needed
          mkdir -p artifacts
          # Deploy
          python -m ai_agents.devops_manager deploy --environment staging
      - uses: actions/upload-artifact@v4
        with:
          name: staging-deployment
          path: artifacts/DEPLOYMENT_LOG.md
          retention-days: 5
          compression-level: 9
          overwrite: false

  deploy_production:
    needs: [deploy_staging]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    concurrency: 
      group: production_environment
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install package in development mode
          pip install -e .
          # List installed packages
          pip list
          # Verify installations
          python -c "import google.generativeai as genai; print(f'Google AI version: {genai.__version__}')"
          python -c "import ai_agents; print(f'AI Agents version: {ai_agents.__version__}')"
          # List modules in ai_agents
          python -c "import ai_agents; print('Available modules:', [m for m in dir(ai_agents) if not m.startswith('_')])"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - uses: actions/download-artifact@v4
        with:
          pattern: '*-output'
          merge-multiple: true
          path: artifacts
      - name: Deploy to Production
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Create artifacts directory if needed
          mkdir -p artifacts
          # Deploy
          python -m ai_agents.devops_manager deploy --environment production
      - uses: actions/upload-artifact@v4
        with:
          name: production-deployment
          path: artifacts/DEPLOYMENT_LOG.md
          retention-days: 5
          compression-level: 9
          overwrite: false

  monitor_production:
    needs: [deploy_production]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://prod.example.com
    concurrency: 
      group: production_environment
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install package in development mode
          pip install -e .
          # List installed packages
          pip list
          # Verify installations
          python -c "import google.generativeai as genai; print(f'Google AI version: {genai.__version__}')"
          python -c "import ai_agents; print(f'AI Agents version: {ai_agents.__version__}')"
          # List modules in ai_agents
          python -c "import ai_agents; print('Available modules:', [m for m in dir(ai_agents) if not m.startswith('_')])"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - uses: actions/download-artifact@v4
        with:
          pattern: '*-output'
          merge-multiple: true
          path: artifacts
      - name: Monitor Deployment
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Create artifacts directory if needed
          mkdir -p artifacts
          # Monitor
          python -m ai_agents.monitoring_analytics generate-report
      - uses: actions/upload-artifact@v4
        with:
          name: monitoring-report
          path: artifacts/MONITORING_REPORT.md
          retention-days: 5
          compression-level: 9
          overwrite: false
